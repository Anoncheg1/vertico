#+title: vertico.el - VERTical Interactive COmpletion
#+author: Daniel Mendler
#+language: en

* Introduction

This package provides a minimalistic vertical completion system, which is based
on the default completion system. By reusing the default system, we achieve full
compatibility with built-in Emacs commands and completion tables. Vertico is
pretty bare-bone and only provides a minimal set of commands. The code base is
less than 500 lines of code. If you are looking for a more full-featured
package, you may be interested in [[https://github.com/raxod502/selectrum][Selectrum]]. Selectrum supports Avy-style quick
keys, a horizontal display and a buffer display.

Complementary packages, which are fully supported:

- [[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer
- [[https://github.com/minad/consult][Consult]]: Many useful search and navigation commands
- [[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu
- [[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style

[[https://github.com/minad/vertico/blob/main/screenshot.svg?raw=true]]

* Configuration

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode))

  ;; Use the orderless completion style.
  ;; Enable partial-completion for files to allow path expansion.
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Add prompt indicator to `completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src
